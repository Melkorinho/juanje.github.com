<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | My personal dev blog]]></title>
  <link href="http://juanje.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://juanje.github.com/"/>
  <updated>2012-03-15T23:26:13+00:00</updated>
  <id>http://juanje.github.com/</id>
  <author>
    <name><![CDATA[Juanje Ojeda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Ruby regex tips]]></title>
    <link href="http://juanje.github.com/blog/2012/03/15/some-ruby-regex-tips/"/>
    <updated>2012-03-15T20:39:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/15/some-ruby-regex-tips</id>
    <content type="html"><![CDATA[<p>I haven't been fan to the regular expresion myself, but they are very useful and I try to learn each day to use their potencial.</p>

<p>I going to write down here some tips that I have found useful and I like to remember. I hope this helps anyone else.</p>

<p>First it's important to remember that the <code>Strings</code> are very powerfull <em>per se</em> and sometimes there is no need for a regular expresions. For example:</p>

<p><code>ruby
1.9.3-p0 :000 &gt; 'Here is some ramdom text'.include? 'ramdom'
 =&gt; true
</code></p>

<p>There are a lot of interesting methods for <code>Strings</code> and I love them, but let's see some cases for regex:</p>

<p>The tipical base case is the previous one, check if there is some text or pattern inside one string. This can be done by doing:</p>

<p><code>ruby
/ramdom/ =~ 'Here is some ramdom text'
</code></p>

<p>This will return the position in the string where the pattern start and <code>nil</code> if the pattern doesn't match. You can use it in a <code>if</code> stament to see if this match. The positive value that indicate the position will count as <code>true</code> for the <code>if</code>, so we can follow with our workflow.</p>

<p>The string that match with the pattern will be stored in a special var. From <code>$1</code> to <code>$9</code> are reserved for this purpose. But, nine vars? Yes, because we can search for more than one pattern and store their values in different variables. Those patterns are called <em>groups</em> and are delimited by parentesis. Lets see it:</p>

<p><code>ruby
/.*(first).*(second)/ =~ 'Something first and second'
1.9.3-p0 :001 &gt; /.*(first).*(second)/ =~ 'Something first and second'
=&gt; 0
1.9.3-p0 :002 &gt; $1
=&gt; "first"
1.9.3-p0 :003 &gt; $2
=&gt; "second"
</code></p>

<p>Oviously is is very simple and silly example. Well this is very basic, but what I wanted to talk about is how to work better with those groups and special variables.
Groups are used for capturing text, but also to define alternatives in a patterns. For example:</p>

<p>```ruby
files = %w( home.png party.jpg party_music.mp3 )</p>

<h1>=> ["home.png", "party.jpg", "party_music.mp3"]</h1>

<p>photos = files.select { |f| /\w+.(png|jpg)/ =~ f }</p>

<h1>=> ["home.png", "party.jpg"]</h1>

<p>```</p>

<p>So the pattern will match eigther with <code>/\w+\.png/</code> or <code>/\w+\.jpg/</code>. This is very useful and is tipical from any language or tool that support regex, but is good to know.
But one interesting thing that I have learnt recently is how to avoid to feed the special variables with the matches' results.</p>

<p>```ruby</p>

<h1>We have those sentences:</h1>

<p>1.9.3-p0 :001 > senteces = [
1.9.3-p0 :002 >   'John is crazy',
1.9.3-p0 :003 >   'Anne is crazy',
1.9.3-p0 :004 >   'Peter is crazy',
1.9.3-p0 :005 >   'John is kidding'
]</p>

<h1>=> ["John is crazy", "Anne is crazy", "Peter is crazy", "John is kidding"]</h1>

<h1>We want to check what is says about 'John' or 'Anne'</h1>

<p>1.9.3-p0 :006 > senteces.each do |sentence|
1.9.3-p0 :007 >   if /(John|Anne) is (\w+)$/ =~ sentence
1.9.3-p0 :008 >     puts "#{$1} -> #{$2}"
1.9.3-p0 :009 >   end
1.9.3-p0 :010 > end
John -> crazy
Anne -> crazy
John -> kidding
```</p>

<p>But there is a nicer way to save the matches, we can store them in our own variables:</p>

<p><code>ruby
1.9.3-p0 :011 &gt; senteces.each do |sentence|
1.9.3-p0 :012 &gt;   if /(?&lt;name&gt;John|Anne) is (?&lt;wat&gt;\w+)$/ =~ sentence
1.9.3-p0 :013 &gt;     puts "#{name} -&gt; #{wat}"
1.9.3-p0 :014 &gt;   end
1.9.3-p0 :015 &gt; end
John -&gt; crazy
Anne -&gt; crazy
John -&gt; kidding
</code></p>

<p>And you also can ignore any group. I found this useful at the <code>step_definitions</code> for <em>Cucumber</em>. Here is one example I did time ago:</p>

<p><code>ruby
When /^the calculator (divide|substract) the (\d+) (?:by|to) the (\d+)$/ do |command, arg1, arg2|
  @output = `ruby bin/rcalc #{command} #{@first} #{@second}`.chomp
  $?.success?.should be_true
end
</code></p>

<p>Cucumber checks for this regex againts the <em>features</em> and pass the groups founded to the block (as <code>command</code>, <code>arg1</code> and <code>arg2</code>). In this perticular case I want a expresion that matched with that kind of sentence but I didn't want to store <code>by</code> or <code>to</code>. Mostly beacuse Cucumber highlight the groups matched at the output and I didn't want for those words. I just wanted reuse the regex to both cases.
Anyways, I found <code>(?:regex)</code> interesting and useful.</p>

<p>Well, I don't know if someone find this useful, but at least I got this written down as alternative to my bad memory :-P</p>

<p>Oh, btw, If you are going to use regular expresions in Ruby I higly recomended you <a href="http://rubular.com/">Rubular</a>. Which is an awesome online Ruby regular expresion editor. Has some nice quick reference and check on-the-fly all your expresions and cases. Really cool :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Symbol.to_proc Trick]]></title>
    <link href="http://juanje.github.com/blog/2012/03/15/the-symbol-dot-to-proc-trick/"/>
    <updated>2012-03-15T03:18:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/15/the-symbol-dot-to-proc-trick</id>
    <content type="html"><![CDATA[<p>Sometimes I find myself saying: "must be a better way to do this". And sometimes, there are :-)</p>

<p>This is the case of processing the elements of a list. Let's see it in an example:</p>

<p>I have a object <code>shop_list</code> which is a string with a list of element separated by comas
<code>ruby
1.9.3-p0 :002 &gt; shop_list
 =&gt; "oranges, eggs, oat, water"
</code></p>

<p>when I split them I get:
<code>ruby
1.9.3-p0 :003 &gt; shop_list.split(',')
 =&gt; ["oranges", " eggs", " oat", " water"]
</code></p>

<p>But some of the new elements of the list have a space before them. And I need the list with no spaces to send it to another object, method, app or whatever which doesn't like those extra spaces.
I can remove them like this:</p>

<p><code>ruby
1.9.3-p0 :004 &gt; shop_list.split(',').map { |e| e.strip }
 =&gt; ["oranges", "eggs", "oat", "water"]
</code></p>

<p>But at Ruby 1.9 we have a simpler way to do the same and is more concise:</p>

<p><code>ruby
1.9.3-p0 :005 &gt; shop_list.split(',').map(&amp;:strip)
 =&gt; ["oranges", "eggs", "oat", "water"]
</code></p>

<p>So this:
```ruby</p>

<h1>name_args = "oranges, eggs, oat, water"</h1>

<p>shop_list = name_args.split(',').map do |item|
  item.strip
end
```</p>

<p>is the same as this:
```ruby</p>

<h1>name_args = "oranges, eggs, oat, water"</h1>

<p>shop_list = name_args.split(',').map(&amp;:strip)
```</p>

<p>The reason is because there is a method called <code>to_proc</code> that convert an object prefixed with an ampersand (<code>&amp;</code>) in a method to call. Ruby will see the symbol (<code>:strip</code>) and it will try to convert it into a Proc to call the block with the list from the <code>map</code> and invoking the method <code>strip</code> at each one of the elements from the list.</p>

<p>Ok, this is not the best explanation ever but I like the new concise form :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hashes at Ruby1.9 are sexy]]></title>
    <link href="http://juanje.github.com/blog/2012/03/06/hashes-at-ruby1-dot-9-are-sexy/"/>
    <updated>2012-03-06T02:36:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/06/hashes-at-ruby1-dot-9-are-sexy</id>
    <content type="html"><![CDATA[<p>Probably everybody knew that, but I didn't when I readed at the <a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Programming Ruby</a> book.</p>

<p>I was use to the no so sexy syntax for the hashes in Ruby:</p>

<p><code>ruby
numbers = { "one" =&gt; "uno", "two" =&gt; "dos", "three" =&gt; "tres" }
</code></p>

<p>Although is very common to see them at code using symbols as keys and split the elements into lines:</p>

<p><code>ruby
numbers = {
  :one   =&gt; "uno",
  :two   =&gt; "dos",
  :three =&gt; "tres"
}
</code></p>

<p>which, actually, looks nicer... (at least to me)</p>

<p>But in Ruby 1.9 they decide that if this was so common, maybe it could me a good idea simplify it. So now we can do the same by doing:</p>

<p><code>ruby
numbers = {
  one:   "uno",
  two:   "dos",
  three: "tres"
}
</code></p>

<p>It is less verbose and, I think, more natural.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[back with Ruby]]></title>
    <link href="http://juanje.github.com/blog/2012/03/06/back-with-ruby/"/>
    <updated>2012-03-06T01:57:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/06/back-with-ruby</id>
    <content type="html"><![CDATA[<p>Long time ago (thanks to a <a href="http://hcoder.org/">good friend</a>) <strong>I felt in love with Ruby</strong> (<em>I think it was around 2001</em>), but I didn't get much into it until years later (2005) when I did some stuff at work.
All these years I've been thinking about come back to learn Ruby and write some code, but you know... time, work...</p>

<p>Now I'm free and have some free time for me to learn all the thing I want, so I'll do so :-)</p>

<p>After (buy and) read some books from <a href="http://pragprog.com/">The Pragmatic Bookself</a> I decided to give a try to the famous <a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Programming Ruby</a>. I checked the new version and I realised the book was really improved from the previous ones. <em>Ruby 1.9</em> and really better explanations about the differents subjects.</p>

<p>Even at the first chapters when they explain very basic thinks that I already knew, I learn a lot of new things with each page. It really worths to read it :-)</p>

<p>I will write here some notes about things I learn (or re-learn) with this and other books. I hope be useful for somebody. Anyway, it will be for me :-P</p>

<p>Happy reading and happy hacking ;-)</p>
]]></content>
  </entry>
  
</feed>
