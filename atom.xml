<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My personal dev blog]]></title>
  <link href="http://juanje.github.com/atom.xml" rel="self"/>
  <link href="http://juanje.github.com/"/>
  <updated>2012-03-15T22:28:40+00:00</updated>
  <id>http://juanje.github.com/</id>
  <author>
    <name><![CDATA[Juanje Ojeda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some Ruby regex tips]]></title>
    <link href="http://juanje.github.com/blog/2012/03/15/some-ruby-regex-tips/"/>
    <updated>2012-03-15T20:39:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/15/some-ruby-regex-tips</id>
    <content type="html"><![CDATA[<p>I haven&#8217;t been fan to the regular expresion myself, but they are very useful and I try to learn each day to use their potencial.</p>

<p>I going to write down here some tips that I have found useful and I like to remember. I hope this helps anyone else.</p>

<p>First it&#8217;s important to remember that the <code>Strings</code> are very powerfull <em>per se</em> and sometimes there is no need for a regular expresions. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">000</span> <span class="o">&gt;</span> <span class="s1">&#39;Here is some ramdom text&#39;</span><span class="o">.</span><span class="n">include?</span> <span class="s1">&#39;ramdom&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a lot of interesting methods for <code>Strings</code> and I love them, but let&#8217;s see some cases for regex:</p>

<p>The tipical base case is the previous one, check if there is some text or pattern inside one string. This can be done by doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/ramdom/</span> <span class="o">=~</span> <span class="s1">&#39;Here is some ramdom text&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return the position in the string where the pattern start and <code>nil</code> if the pattern doesn&#8217;t match. You can use it in a <code>if</code> stament to see if this match. The positive value that indicate the position will count as <code>true</code> for the <code>if</code>, so we can follow with our workflow.</p>

<p>The string that match with the pattern will be stored in a special var. From <code>$1</code> to <code>$9</code> are reserved for this purpose. But, nine vars? Yes, because we can search for more than one pattern and store their values in different variables. Those patterns are called <em>groups</em> and are delimited by parentesis. Lets see it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/.*(first).*(second)/</span> <span class="o">=~</span> <span class="s1">&#39;Something first and second&#39;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="sr">/.*(first).*(second)/</span> <span class="o">=~</span> <span class="s1">&#39;Something first and second&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="vg">$1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;first&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="vg">$2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;second&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oviously is is very simple and silly example. Well this is very basic, but what I wanted to talk about is how to work better with those groups and special variables.
Groups are used for capturing text, but also to define alternatives in a patterns. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">files</span> <span class="o">=</span> <span class="sx">%w( home.png party.jpg party_music.mp3 )</span>
</span><span class='line'><span class="c1">#  =&gt; [&quot;home.png&quot;, &quot;party.jpg&quot;, &quot;party_music.mp3&quot;] </span>
</span><span class='line'><span class="n">photos</span> <span class="o">=</span> <span class="n">files</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span><span class="sr"> /\w+\.(png|jpg)/</span> <span class="o">=~</span> <span class="n">f</span> <span class="p">}</span>
</span><span class='line'><span class="c1">#  =&gt; [&quot;home.png&quot;, &quot;party.jpg&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the pattern will match eigther with <code>/\w+\.png/</code> or <code>/\w+\.jpg/</code>. This is very useful and is tipical from any language or tool that support regex, but is good to know.
But one interesting thing that I have learnt recently is how to avoid to feed the special variables with the matches&#8217; results.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># We have those sentences:</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">001</span> <span class="o">&gt;</span> <span class="n">senteces</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span>   <span class="s1">&#39;John is crazy&#39;</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span>   <span class="s1">&#39;Anne is crazy&#39;</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span>   <span class="s1">&#39;Peter is crazy&#39;</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span>   <span class="s1">&#39;John is kidding&#39;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="c1">#  =&gt; [&quot;John is crazy&quot;, &quot;Anne is crazy&quot;, &quot;Peter is crazy&quot;, &quot;John is kidding&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># We want to check what is says about &#39;John&#39; or &#39;Anne&#39;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">senteces</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sentence</span><span class="o">|</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">007</span> <span class="o">&gt;</span>   <span class="k">if</span><span class="sr"> /(John|Anne) is (\w+)$/</span> <span class="o">=~</span> <span class="n">sentence</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span>     <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$1</span><span class="si">}</span><span class="s2"> -&gt; </span><span class="si">#{</span><span class="vg">$2</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">010</span> <span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="no">John</span> <span class="o">-&gt;</span> <span class="n">crazy</span>
</span><span class='line'><span class="no">Anne</span> <span class="o">-&gt;</span> <span class="n">crazy</span>
</span><span class='line'><span class="no">John</span> <span class="o">-&gt;</span> <span class="n">kidding</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is a nicer way to save the matches, we can store them in our own variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">011</span> <span class="o">&gt;</span> <span class="n">senteces</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">sentence</span><span class="o">|</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">012</span> <span class="o">&gt;</span>   <span class="k">if</span><span class="sr"> /(?&lt;name&gt;John|Anne) is (?&lt;wat&gt;\w+)$/</span> <span class="o">=~</span> <span class="n">sentence</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">013</span> <span class="o">&gt;</span>     <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> -&gt; </span><span class="si">#{</span><span class="n">wat</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">014</span> <span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">015</span> <span class="o">&gt;</span> <span class="k">end</span>
</span><span class='line'><span class="no">John</span> <span class="o">-&gt;</span> <span class="n">crazy</span>
</span><span class='line'><span class="no">Anne</span> <span class="o">-&gt;</span> <span class="n">crazy</span>
</span><span class='line'><span class="no">John</span> <span class="o">-&gt;</span> <span class="n">kidding</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you also can ignore any group. I found this useful at the <code>step_definitions</code> for <em>Cucumber</em>. Here is one example I did time ago:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">When</span><span class="sr"> /^the calculator (divide|substract) the (\d+) (?:by|to) the (\d+)$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="p">,</span> <span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@output</span> <span class="o">=</span> <span class="sb">`ruby bin/rcalc </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="sb"> </span><span class="si">#{</span><span class="vi">@first</span><span class="si">}</span><span class="sb"> </span><span class="si">#{</span><span class="vi">@second</span><span class="si">}</span><span class="sb">`</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="vg">$?</span><span class="o">.</span><span class="n">success?</span><span class="o">.</span><span class="n">should</span> <span class="n">be_true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cucumber checks for this regex againts the <em>features</em> and pass the groups founded to the block (as <code>command</code>, <code>arg1</code> and <code>arg2</code>). In this perticular case I want a expresion that matched with that kind of sentence but I didn&#8217;t want to store <code>by</code> or <code>to</code>. Mostly beacuse Cucumber highlight the groups matched at the output and I didn&#8217;t want for those words. I just wanted reuse the regex to both cases.
Anyways, I found <code>(?:regex)</code> interesting and useful.</p>

<p>Well, I don&#8217;t know if someone find this useful, but at least I got this written down as alternative to my bad memory :-P</p>

<p>Oh, btw, If you are going to use regular expresions in Ruby I higly recomended you <a href="http://rubular.com/">Rubular</a>. Which is an awesome online Ruby regular expresion editor. Has some nice quick reference and check on-the-fly all your expresions and cases. Really cool :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Symbol.to_proc Trick]]></title>
    <link href="http://juanje.github.com/blog/2012/03/15/the-symbol-dot-to-proc-trick/"/>
    <updated>2012-03-15T03:18:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/15/the-symbol-dot-to-proc-trick</id>
    <content type="html"><![CDATA[<p>Sometimes I find myself saying: &#8220;must be a better way to do this&#8221;. And sometimes, there are :-)</p>

<p>This is the case of processing the elements of a list. Let&#8217;s see it in an example:</p>

<p>I have a object <code>shop_list</code> which is a string with a list of element separated by comas</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">002</span> <span class="o">&gt;</span> <span class="n">shop_list</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;oranges, eggs, oat, water&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>when I split them I get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">003</span> <span class="o">&gt;</span> <span class="n">shop_list</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;oranges&quot;</span><span class="p">,</span> <span class="s2">&quot; eggs&quot;</span><span class="p">,</span> <span class="s2">&quot; oat&quot;</span><span class="p">,</span> <span class="s2">&quot; water&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But some of the new elements of the list have a space before them. And I need the list with no spaces to send it to another object, method, app or whatever which doesn&#8217;t like those extra spaces.
I can remove them like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">shop_list</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">strip</span> <span class="p">}</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;oranges&quot;</span><span class="p">,</span> <span class="s2">&quot;eggs&quot;</span><span class="p">,</span> <span class="s2">&quot;oat&quot;</span><span class="p">,</span> <span class="s2">&quot;water&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But at Ruby 1.9 we have a simpler way to do the same and is more concise:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">-</span><span class="n">p0</span> <span class="p">:</span><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">shop_list</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;oranges&quot;</span><span class="p">,</span> <span class="s2">&quot;eggs&quot;</span><span class="p">,</span> <span class="s2">&quot;oat&quot;</span><span class="p">,</span> <span class="s2">&quot;water&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># name_args = &quot;oranges, eggs, oat, water&quot;</span>
</span><span class='line'><span class="n">shop_list</span> <span class="o">=</span> <span class="n">name_args</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>  <span class="n">item</span><span class="o">.</span><span class="n">strip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>is the same as this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># name_args = &quot;oranges, eggs, oat, water&quot;</span>
</span><span class='line'><span class="n">shop_list</span> <span class="o">=</span> <span class="n">name_args</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:strip</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason is because there is a method called <code>to_proc</code> that convert an object prefixed with an ampersand (<code>&amp;</code>) in a method to call. Ruby will see the symbol (<code>:strip</code>) and it will try to convert it into a Proc to call the block with the list from the <code>map</code> and invoking the method <code>strip</code> at each one of the elements from the list.</p>

<p>Ok, this is not the best explanation ever but I like the new concise form :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hashes at Ruby1.9 are sexy]]></title>
    <link href="http://juanje.github.com/blog/2012/03/06/hashes-at-ruby1-dot-9-are-sexy/"/>
    <updated>2012-03-06T02:36:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/06/hashes-at-ruby1-dot-9-are-sexy</id>
    <content type="html"><![CDATA[<p>Probably everybody knew that, but I didn&#8217;t when I readed at the <a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Programming Ruby</a> book.</p>

<p>I was use to the no so sexy syntax for the hashes in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;one&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;uno&quot;</span><span class="p">,</span> <span class="s2">&quot;two&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;dos&quot;</span><span class="p">,</span> <span class="s2">&quot;three&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;tres&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although is very common to see them at code using symbols as keys and split the elements into lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:one</span>   <span class="o">=&gt;</span> <span class="s2">&quot;uno&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:two</span>   <span class="o">=&gt;</span> <span class="s2">&quot;dos&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:three</span> <span class="o">=&gt;</span> <span class="s2">&quot;tres&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>which, actually, looks nicer&#8230; (at least to me)</p>

<p>But in Ruby 1.9 they decide that if this was so common, maybe it could me a good idea simplify it. So now we can do the same by doing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">one</span><span class="p">:</span>   <span class="s2">&quot;uno&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">two</span><span class="p">:</span>   <span class="s2">&quot;dos&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">three</span><span class="p">:</span> <span class="s2">&quot;tres&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is less verbose and, I think, more natural.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[back with Ruby]]></title>
    <link href="http://juanje.github.com/blog/2012/03/06/back-with-ruby/"/>
    <updated>2012-03-06T01:57:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/03/06/back-with-ruby</id>
    <content type="html"><![CDATA[<p>Long time ago (thanks to a <a href="http://hcoder.org/">good friend</a>) <strong>I felt in love with Ruby</strong> (<em>I think it was around 2001</em>), but I didn&#8217;t get much into it until years later (2005) when I did some stuff at work.
All these years I&#8217;ve been thinking about come back to learn Ruby and write some code, but you know&#8230; time, work&#8230;</p>

<p>Now I&#8217;m free and have some free time for me to learn all the thing I want, so I&#8217;ll do so :-)</p>

<p>After (buy and) read some books from <a href="http://pragprog.com/">The Pragmatic Bookself</a> I decided to give a try to the famous <a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">Programming Ruby</a>. I checked the new version and I realised the book was really improved from the previous ones. <em>Ruby 1.9</em> and really better explanations about the differents subjects.</p>

<p>Even at the first chapters when they explain very basic thinks that I already knew, I learn a lot of new things with each page. It really worths to read it :-)</p>

<p>I will write here some notes about things I learn (or re-learn) with this and other books. I hope be useful for somebody. Anyway, it will be for me :-P</p>

<p>Happy reading and happy hacking ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The classic: Hello World!]]></title>
    <link href="http://juanje.github.com/blog/2012/02/18/the-classic-hello-world/"/>
    <updated>2012-02-18T05:06:00+00:00</updated>
    <id>http://juanje.github.com/blog/2012/02/18/the-classic-hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s1">&#39;Hello world!&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hi :-)</p>

<p>This is <em>Yet Another Dev Blog</em>. I got already <a href="http://blogs.gnome.org/juanje">one for GNOME and Distros&#8217; stuff</a>, but I just wanted to try this blog tool made for developers, <a href="http://octopress.org/">Octopress</a>, and see if is easier to share code and ideas.</p>

<p>Actually, some times I just need a place to save my gist with some comments or exaplanation. Other I just want to express some crazy technical ideas, so I think <a href="http://github.com">Github</a> is a good place for this sort of things :-P</p>

<p>I warning you that I&#8217;ll probably talk a lot about <strong>Ruby</strong>, <a href="http://wiki.opscode.com/display/chef">Chef</a>, <a href="http://www.jedi.be/blog/2010/02/12/what-is-this-devops-thing-anyway/">DevOps</a>, <a href="http://en.wikipedia.org/wiki/Behavior_Driven_Development">BDD</a>, <a href="http://vagrantup.com/">Vagrant</a> and more similar stuff that I&#8217;m crazy about right now :-)</p>

<p>See you soon and Happy Hacking!</p>
]]></content>
  </entry>
  
</feed>
